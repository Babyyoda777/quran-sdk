apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'digital.wup.android-maven-publish'
apply plugin: 'kotlin-android'
apply plugin: 'org.jetbrains.dokka-android'

group = getProperty('projectGroupName').toString()
version = getProperty('projectVersionName').toString()

File[] proGuardFileCollection = file('./proguard').listFiles()
File[] proGuardDebugFileCollection = file('./proguard-debug').listFiles()

android {
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    lintOptions {
        abortOnError true
    }

    buildTypes {
        debug {
            minifyEnabled false
            useProguard false
            proguardFile(getDefaultProguardFile('proguard-android.txt'))
            proguardFiles(proGuardFileCollection)
            proguardFiles(proGuardDebugFileCollection)
        }

        release {
            minifyEnabled false
            useProguard false
            proguardFile(getDefaultProguardFile('proguard-android.txt'))
            proguardFiles(proGuardFileCollection)
        }
    }
}

dependencies {
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    testImplementation 'junit:junit:4.13-beta-3'
    testImplementation "org.hamcrest:hamcrest-library:$hamcrest_version"

    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'com.tazkiyatech:android-utils:0.0.5'
    androidTestImplementation "org.hamcrest:hamcrest-library:$hamcrest_version"
}

task generateSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set('sources')
    group = 'build'
}

task generateJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/docs/javadoc"
    description = "Generates the Javadoc for this module."
    group = 'documentation'
}

task generateJavadocJar(type: Jar) {
    from generateJavadoc
    archiveClassifier.set('javadoc')
    destinationDirectory.set(file("$buildDir/outputs/javadoc"))
    description = "Builds up a jar of this module's Javadoc."
    group = 'build'
}

publishing {
    publications {
        QuranSDK(MavenPublication) {
            from components.android
            artifact generateJavadocJar
            artifact generateSourcesJar

            groupId getProperty('projectGroupName').toString()
            artifactId getProperty('projectArtifactName').toString()
            version getProperty('projectVersionName').toString()
        }
    }
}

bintray {
    user = getProperty('bintray_user').toString()
    key = getProperty('bintray_api_key').toString()
    publications = ['QuranSDK']
    pkg {
        repo = 'maven'
        name = getProperty('projectArtifactName').toString()
        licenses = ['Apache-2.0']
        vcsUrl = 'https://bitbucket.org/adilson05uk/quran-sdk.git'

        version {
            name = getProperty('projectVersionName').toString()
            desc = 'Latest release!'
            released = new Date()
            vcsTag = 'release_' + getProperty('projectVersionName').toString()
        }
    }
}
